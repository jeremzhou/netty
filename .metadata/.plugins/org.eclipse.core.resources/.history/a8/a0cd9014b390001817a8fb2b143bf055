package com.utstar.uapollo.service.mapper;

import com.utstar.uapollo.domain.Project;
import com.utstar.uapollo.service.dto.ProjectDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2018-07-26T16:25:55+0800",
    comments = "version: 1.2.0.Final, compiler: Eclipse JDT (IDE) 3.13.101.v_OTDT_r262_201803031341, environment: Java 1.8.0_151 (Oracle Corporation)"
)
@Component
public class ProjectMapperImpl implements ProjectMapper {

    @Override
    public Project toEntity(ProjectDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Project project = new Project();

        project.setId( dto.getId() );
        project.setName( dto.getName() );
        project.setUserId( dto.getUserId() );
        project.setCreateTime( dto.getCreateTime() );
        project.setModifyTime( dto.getModifyTime() );

        return project;
    }

    @Override
    public ProjectDTO toDto(Project entity) {
        if ( entity == null ) {
            return null;
        }

        ProjectDTO projectDTO = new ProjectDTO();

        projectDTO.setId( entity.getId() );
        projectDTO.setName( entity.getName() );
        projectDTO.setUserId( entity.getUserId() );
        projectDTO.setCreateTime( entity.getCreateTime() );
        projectDTO.setModifyTime( entity.getModifyTime() );

        return projectDTO;
    }

    @Override
    public List<Project> toEntity(List<ProjectDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<Project> list = new ArrayList<Project>( dtoList.size() );
        for ( ProjectDTO projectDTO : dtoList ) {
            list.add( toEntity( projectDTO ) );
        }

        return list;
    }

    @Override
    public List<ProjectDTO> toDto(List<Project> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<ProjectDTO> list = new ArrayList<ProjectDTO>( entityList.size() );
        for ( Project project : entityList ) {
            list.add( toDto( project ) );
        }

        return list;
    }
}
