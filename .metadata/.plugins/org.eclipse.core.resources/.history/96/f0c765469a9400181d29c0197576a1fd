package com.utstat.test;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class BlockingQueueTest {
	
	public static class Basket {
		BlockingQueue<String> basket = new ArrayBlockingQueue<String>(3);
		
		public void produce() throws InterruptedException {
			basket.put("An apple");
		}
		
		public String consume() throws InterruptedException {
			String apple =basket.take();
			return apple;
		}
		
		public int getAppleNumber() {
			return basket.size();
		}
	}
	
	
	public static void testBasket() {
		final Basket basket = new Basket();
		
		class Producer implements Runnable{

			@Override
			public void run() {
				try {
					while(true) {
						System.out.println("生产者生产：" + System.currentTimeMillis());
						basket.produce();
						System.out.println("生产者生产完毕：" + System.currentTimeMillis());
						System.out.println("生产完后数量：" + basket.getAppleNumber() + "个");
						Thread.sleep(3000);
					
					}
				} catch (Exception e) {
				}
			}
		} 
		
		class Consumer implements Runnable {
			@Override
			public void run() {
				try {
					while(true) {
						System.out.println("消费者消费：" + System.currentTimeMillis());
						basket.consume();
						System.out.println("消费完后："+ System.currentTimeMillis());
						System.out.println("消费完后剩余："+ basket.getAppleNumber()+ " 个");
						Thread.sleep(1000);
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
		}
		ExecutorService service = Executors.newCachedThreadPool();
		Producer produce = new Producer();
		Consumer consumer = new Consumer();
		service.submit(produce);
		service.submit(consumer);

	}

}
